// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// introduction_of_cpp_index
void introduction_of_cpp_index();
RcppExport SEXP _HCPCV_introduction_of_cpp_index() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    introduction_of_cpp_index();
    return R_NilValue;
END_RCPP
}
// estimated_sigma_square
NumericVector estimated_sigma_square(NumericMatrix Y);
RcppExport SEXP _HCPCV_estimated_sigma_square(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(estimated_sigma_square(Y));
    return rcpp_result_gen;
END_RCPP
}
// standardize_matrix
NumericMatrix standardize_matrix(NumericMatrix X, NumericVector D);
RcppExport SEXP _HCPCV_standardize_matrix(SEXP XSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(standardize_matrix(X, D));
    return rcpp_result_gen;
END_RCPP
}
// normalize_matrix
NumericMatrix normalize_matrix(NumericMatrix X, NumericVector W, bool normalized);
RcppExport SEXP _HCPCV_normalize_matrix(SEXP XSEXP, SEXP WSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_matrix(X, W, normalized));
    return rcpp_result_gen;
END_RCPP
}
// sum_knorm
double sum_knorm(NumericVector x, int k);
RcppExport SEXP _HCPCV_sum_knorm(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_knorm(x, k));
    return rcpp_result_gen;
END_RCPP
}
// cost_matrix
NumericMatrix cost_matrix(NumericMatrix X, NumericVector W);
RcppExport SEXP _HCPCV_cost_matrix(SEXP XSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(cost_matrix(X, W));
    return rcpp_result_gen;
END_RCPP
}
// seek_dp_tau
NumericVector seek_dp_tau(int L, NumericMatrix H);
RcppExport SEXP _HCPCV_seek_dp_tau(SEXP LSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(seek_dp_tau(L, H));
    return rcpp_result_gen;
END_RCPP
}
// findMin
void findMin(NumericVector arr, int n, double& minVal, int& minIdx);
RcppExport SEXP _HCPCV_findMin(SEXP arrSEXP, SEXP nSEXP, SEXP minValSEXP, SEXP minIdxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double& >::type minVal(minValSEXP);
    Rcpp::traits::input_parameter< int& >::type minIdx(minIdxSEXP);
    findMin(arr, n, minVal, minIdx);
    return R_NilValue;
END_RCPP
}
// cp_hdmean_dp
NumericMatrix cp_hdmean_dp(NumericMatrix X, NumericVector W, int Kmax);
RcppExport SEXP _HCPCV_cp_hdmean_dp(SEXP XSEXP, SEXP WSEXP, SEXP KmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type Kmax(KmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(cp_hdmean_dp(X, W, Kmax));
    return rcpp_result_gen;
END_RCPP
}
// remove_rows_of_matrix
NumericMatrix remove_rows_of_matrix(NumericMatrix X, NumericVector a);
RcppExport SEXP _HCPCV_remove_rows_of_matrix(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_rows_of_matrix(X, a));
    return rcpp_result_gen;
END_RCPP
}
// init_vector_with_constant
NumericVector init_vector_with_constant(int len, int c);
RcppExport SEXP _HCPCV_init_vector_with_constant(SEXP lenSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(init_vector_with_constant(len, c));
    return rcpp_result_gen;
END_RCPP
}
// trace_R_square_cpp
double trace_R_square_cpp(NumericMatrix X);
RcppExport SEXP _HCPCV_trace_R_square_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(trace_R_square_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// cp_hdmean_op
List cp_hdmean_op(NumericMatrix X, NumericVector W, double pen);
RcppExport SEXP _HCPCV_cp_hdmean_op(SEXP XSEXP, SEXP WSEXP, SEXP penSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    rcpp_result_gen = Rcpp::wrap(cp_hdmean_op(X, W, pen));
    return rcpp_result_gen;
END_RCPP
}
// cp_hdmean_pelt
List cp_hdmean_pelt(NumericMatrix X, NumericVector W, double pen);
RcppExport SEXP _HCPCV_cp_hdmean_pelt(SEXP XSEXP, SEXP WSEXP, SEXP penSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    rcpp_result_gen = Rcpp::wrap(cp_hdmean_pelt(X, W, pen));
    return rcpp_result_gen;
END_RCPP
}
// cv_objfun
double cv_objfun(NumericMatrix Xtrain, NumericMatrix Xtest, NumericVector W, NumericVector tau);
RcppExport SEXP _HCPCV_cv_objfun(SEXP XtrainSEXP, SEXP XtestSEXP, SEXP WSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xtrain(XtrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xtest(XtestSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_objfun(Xtrain, Xtest, W, tau));
    return rcpp_result_gen;
END_RCPP
}
// Sxy_fun
double Sxy_fun(NumericMatrix X, NumericMatrix Y, NumericVector W, NumericVector tau);
RcppExport SEXP _HCPCV_Sxy_fun(SEXP XSEXP, SEXP YSEXP, SEXP WSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(Sxy_fun(X, Y, W, tau));
    return rcpp_result_gen;
END_RCPP
}
// test_matrix_plus_scalar
NumericMatrix test_matrix_plus_scalar(NumericMatrix X, double a);
RcppExport SEXP _HCPCV_test_matrix_plus_scalar(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(test_matrix_plus_scalar(X, a));
    return rcpp_result_gen;
END_RCPP
}
// test_pen_char_param
void test_pen_char_param(NumericMatrix X, std::string penaltyform);
RcppExport SEXP _HCPCV_test_pen_char_param(SEXP XSEXP, SEXP penaltyformSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type penaltyform(penaltyformSEXP);
    test_pen_char_param(X, penaltyform);
    return R_NilValue;
END_RCPP
}
// test_bool_param
void test_bool_param(NumericMatrix X, bool normalized);
RcppExport SEXP _HCPCV_test_bool_param(SEXP XSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    test_bool_param(X, normalized);
    return R_NilValue;
END_RCPP
}
// test_vector_bounds
NumericVector test_vector_bounds(NumericVector H);
RcppExport SEXP _HCPCV_test_vector_bounds(SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(test_vector_bounds(H));
    return rcpp_result_gen;
END_RCPP
}
// test_insert_set
void test_insert_set();
RcppExport SEXP _HCPCV_test_insert_set() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_insert_set();
    return R_NilValue;
END_RCPP
}
// test_init_vector_with_constant
void test_init_vector_with_constant(int len, int c);
RcppExport SEXP _HCPCV_test_init_vector_with_constant(SEXP lenSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    test_init_vector_with_constant(len, c);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HCPCV_introduction_of_cpp_index", (DL_FUNC) &_HCPCV_introduction_of_cpp_index, 0},
    {"_HCPCV_estimated_sigma_square", (DL_FUNC) &_HCPCV_estimated_sigma_square, 1},
    {"_HCPCV_standardize_matrix", (DL_FUNC) &_HCPCV_standardize_matrix, 2},
    {"_HCPCV_normalize_matrix", (DL_FUNC) &_HCPCV_normalize_matrix, 3},
    {"_HCPCV_sum_knorm", (DL_FUNC) &_HCPCV_sum_knorm, 2},
    {"_HCPCV_cost_matrix", (DL_FUNC) &_HCPCV_cost_matrix, 2},
    {"_HCPCV_seek_dp_tau", (DL_FUNC) &_HCPCV_seek_dp_tau, 2},
    {"_HCPCV_findMin", (DL_FUNC) &_HCPCV_findMin, 4},
    {"_HCPCV_cp_hdmean_dp", (DL_FUNC) &_HCPCV_cp_hdmean_dp, 3},
    {"_HCPCV_remove_rows_of_matrix", (DL_FUNC) &_HCPCV_remove_rows_of_matrix, 2},
    {"_HCPCV_init_vector_with_constant", (DL_FUNC) &_HCPCV_init_vector_with_constant, 2},
    {"_HCPCV_trace_R_square_cpp", (DL_FUNC) &_HCPCV_trace_R_square_cpp, 1},
    {"_HCPCV_cp_hdmean_op", (DL_FUNC) &_HCPCV_cp_hdmean_op, 3},
    {"_HCPCV_cp_hdmean_pelt", (DL_FUNC) &_HCPCV_cp_hdmean_pelt, 3},
    {"_HCPCV_cv_objfun", (DL_FUNC) &_HCPCV_cv_objfun, 4},
    {"_HCPCV_Sxy_fun", (DL_FUNC) &_HCPCV_Sxy_fun, 4},
    {"_HCPCV_test_matrix_plus_scalar", (DL_FUNC) &_HCPCV_test_matrix_plus_scalar, 2},
    {"_HCPCV_test_pen_char_param", (DL_FUNC) &_HCPCV_test_pen_char_param, 2},
    {"_HCPCV_test_bool_param", (DL_FUNC) &_HCPCV_test_bool_param, 2},
    {"_HCPCV_test_vector_bounds", (DL_FUNC) &_HCPCV_test_vector_bounds, 1},
    {"_HCPCV_test_insert_set", (DL_FUNC) &_HCPCV_test_insert_set, 0},
    {"_HCPCV_test_init_vector_with_constant", (DL_FUNC) &_HCPCV_test_init_vector_with_constant, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_HCPCV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
