% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datagenerating.R
\name{genconst_Kn_theta}
\alias{genconst_Kn_theta}
\title{Generate theta vector}
\usage{
genconst_Kn_theta(Kn, umax = 1)
}
\arguments{
\item{Kn}{the number of change-points}

\item{umax}{the constant (or the max value) of each element of
the generated vector}
}
\value{
a (Kn+1)-length vector, which can be viewed as the base vector,
  which would further generate the \eqn{\mu}'s matrix.
}
\description{
Generate theta vecor with (Kn+1)-length
}
\details{
We need to set the velues of n, p, r, umax, which finally can generate proper 
\eqn{\delta_{n,p}}, thus the signal matrix, \eqn{\mu} matrix. 
In order to generate proper \eqn{\delta_{n,p}}, we need \eqn{\theta}. 
The \eqn{\theta}'s vector takes value of 0, umax alternatively.
Then \eqn{\lambda_{n}} defines the minimum distance between true change-points,
\deqn{\lambda_{n} = min(\tau_{j+1} - \tau_{j}) . }
The \eqn{\delta_{n,p}} is defined as following, 
\deqn{\delta_{n,p} = min \| D^{-1/2}(\mu_{j+1} - \mu_{j}) \|^2 .} 
At the same time, approximately we have \eqn{\delta_{n,p}} of magnitude 
  \deqn{\delta_{n,p} = p * r * umax^2 , }
with each element being umax in \eqn{\bm{\mu}} .

\deqn{D = diagonal(\sigma_{j}^2)}
\deqn{signal = \lambda_{n} \delta_{n,p}}

Notes: \eqn{\lambda_{n}} is only about the positions, wheras,
\eqn{\delta_{n,p}} is about both the positions and the \eqn{\mu}'s.

Notes: e.g. tau2n = c(0.2, 0.4, 0.6), then Kn=3 not 5.
\itemize{
\item{If (Kn+1) is even, the generated vector will be
   [0, umax, 0, umax, ..., 0, umax] which ends with umax;}
\item{If (Kn+1) is odd, the generated vector will be
   [0, umax, 0, umax, ..., 0, umax, 0] which ends with 0.}
}
}
\examples{
  tau2n <- c(0.2, 0.4, 0.6)  # then Kn=3 not 5.
  Kn <- length(tau2n)
  theta_true <- genconst_Kn_theta(Kn, umax=4)
}
